# 服务器端代码
from cryptography.fernet import Fernet

#  生成密钥
key = Fernet.generate_key()
f = Fernet(key)

def generate_license_key(expiry_date_str):
    license_data = expiry_date_str
    encrypted_license_key = f.encrypt(license_data.encode())
    return encrypted_license_key.decode()

expiry_date_str = input("请输入过期日期 (YYYY-MM-DD): ")
license_key = generate_license_key(expiry_date_str)
print(f"生成的授权码: {license_key}")
print(f"生成的密钥: {key.decode()}")


# 客户端代码
import datetime
import logging
import multiprocessing
import os
import random
import requests
import time
from cryptography.fernet import Fernet


# 配置日志
log_dir = "log"
log_file = os.path.join(log_dir, "requests.log")
os.makedirs(log_dir, exist_ok=True)  # 创建日志目录，如果已存在则忽略

logging.basicConfig(filename=log_file, level=logging.INFO, filemode='a',
                    format='%(asctime)s - %(levelname)s - %(filename)s - %(lineno)d - %(message)s')

def decrypt_license_key(encrypted_license_key, key):
    """解密授权码"""
    f = Fernet(key)
    try:
        decrypted_data = f.decrypt(encrypted_license_key.encode()).decode()
        return decrypted_data
    except Exception as e:
        logging.error(f"解密授权码失败: {e}")
        return None


def verify_license_key(encrypted_license_key, key):
    """验证授权码"""
    decrypted_data = decrypt_license_key(encrypted_license_key, key)
    if decrypted_data is None:
        return False
    try:
        expiry_date = datetime.datetime.strptime(decrypted_data, '%Y-%m-%d').date()
        today = datetime.date.today()
        return today <= expiry_date
    except ValueError:
        logging.error("授权码格式错误")
        return False

# 建立日志文件夹和日志文件
log_dir = "log"
log_file = os.path.join(log_dir, "requests.log")

if not os.path.exists(log_dir):
    os.makedirs(log_dir)

logging.basicConfig(filename=log_file, level=logging.INFO, filemode='a',
                    format='%(asctime)s - %(levelname)s - %(message)s')


success_num = 0
CONSTANT = 0
count = 0

def brash(proxy_dict,success_count,url):
    user_agent_list = [
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1",
        "Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6",
        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5",
        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24",
        "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"
    ]
    UserAgent = random.choice(user_agent_list)
    header = {'User-Agent': UserAgent}

    try:
        r = requests.get(url, headers=header, proxies=proxy_dict, timeout=10)
        r.raise_for_status()
        logging.info("Request successful 第"+str(success_count)+"次") # 成功日志
        print("successful 第"+str(success_count)+"次")
        time.sleep(0.5)
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed: {e}") # 失败日志
        print(f"failed: {e}")
    except Exception as e:
        logging.exception(f"An unexpected error occurred: {e}") # 异常日志
        print(f"An unexpected error occurred: {e}")
    return None


if __name__ == "__main__":
    key_input = input("请输入密钥: ")
    key = key_input.encode('utf-8')

    encrypted_license_key_input = input("请输入加密后的授权码: ")

    url= input("请输入网站: ")

    is_valid = verify_license_key(encrypted_license_key_input, key)

    if is_valid:
        print("授权码有效")
        final = 10000
        count = 1
        request_count = 0
        success_count = 1  # 成功请求计数器
        for _ in range(final):
            proxies = [{'http': 'https://api.lumiproxy.com/web_v1/free-proxy/list?page_size=60&page=1&language=zh-hans'}]
            for _ in range(count):
                pool = multiprocessing.Pool(processes=32)
                results = [pool.apply_async(brash, (proxy,success_count,url)) for proxy in proxies if proxy]
                success_count += 1
                for result in results:
                    if result.get():
                        request_count += 1
                    if request_count % 100 == 0:
                        if not is_valid:
                            print("授权码已过期，停止运行。")
                            exit(0)
                pool.close()
                pool.join()
        else:
            print("获取代理失败")
    else:
        print("授权码无效, 请联系管理员:15135863813")
